const modelsKeys=Object.keys(models);function shuffle(t){for(let e=t.length-1;0<e;e--){var n=Math.floor(Math.random()*(e+1));[t[e],t[n]]=[t[n],t[e]]}return t}const modelsDivTitleList=shuffle(["What models are available?","Which models can I access?","What options do I have in terms of models?","What kinds of models are at my disposal?","Which models are within my reach?","What's in the repertoire of available models?","What choices do I have among the models?","Which models are up for grabs?","What's on the menu in terms of models?","What's in the lineup of available models?"]),modelsDivTextList=["For manual model utilization","In manually leveraging the model","When employing the model manually","Utilizing the model manually involves","When integrating the model manually","In the manual application of the model","For hands-on model utilization","When using the model manually","In manual model integration","For direct model application","During manual model utilization","Incorporating the model manually requires","When applying the model manually","Using the model manually necessitates","In the hands-on utilization of the model","When integrating the model manually","For direct model utilization","In manual model application","During hands-on model integration","Utilizing the model manually entails"],chaptersUl=document.querySelector(".chapters"),main=document.querySelector("main");for(const d in models)if(Object.hasOwnProperty.call(models,d)){const e=document.createElement("li"),f=(e.classList.add("min-h-0","inline-block","mr-5","last:mr-0"),document.createElement("h4")),g=(f.classList.add("notion-h","notion-h3","notion-h-indent-1"),document.createElement("span")),h=document.createElement("div"),i=(h.classList.add("notion-header-anchor"),document.createElement("a")),j=(i.classList.add("notion-hash-link"),i.title=""+d,i.innerHTML='<svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>',document.createElement("span")),k=(j.classList.add("notion-h-title"),j.textContent=""+d,document.createElement("details")),l=(k.classList.add("notion-toggle"),document.createElement("summary")),m=document.createElement("h3"),n=(m.classList.add("notion-h","notion-h2","notion-h-indent-0"),document.createElement("span")),o=document.createElement("div"),p=(o.classList.add("notion-header-anchor"),document.createElement("div")),q=(p.classList.add("notion-h-title"),modelsKeys.indexOf(d)%modelsDivTitleList.length),r=(p.textContent=modelsDivTitleList[q],document.createElement("div")),s=models[d];for(const t in s){const u=document.createElement("div"),v=(u.classList.add("notion-text"),u.textContent=t,document.createElement("ul"));v.classList.add("notion-list","notion-list-disc");for(const w in s[t]){const x=s[t][w],y=x.is_exist,z=x.path,A=z.match(/(?:\/|\\)([^\/\\]+)$/)[1],B=x.url,C=B.split("."),D=B.match(/(?:\/|\\)([^\/\\]+)$/)[1],E=C[C.length-1];if((moduleDivLi=document.createElement("li")).style.wordBreak="break-all",!0!==y)moduleDivLi.innerHTML=`You will able to find model in ${z}.`;else{const F=Math.floor(Math.random()*modelsDivTextList.length),G=modelsDivTextList[F];"zip"===E||"rar"===E?moduleDivLi.innerHTML=`${G}, first, <a class="underline" href="${B}">${D}</a> file. Once downloaded, extract its contents and place them in the following directory ${z}.`:moduleDivLi.innerHTML=`${G}, download the <a class="underline" href="${B}">${D}</a> file. Move it into the ${z}, renaming it as ${A}.`}v.appendChild(moduleDivLi)}r.appendChild(u),r.appendChild(v)}g.appendChild(h),g.appendChild(i),g.appendChild(j),f.appendChild(g),n.appendChild(o),n.appendChild(p),m.appendChild(n),l.appendChild(m),k.appendChild(l),k.appendChild(r),e.innerHTML=`<button onclick="scrollToHeader(this, '${d}')">${d}</button>`,main.appendChild(f),main.appendChild(k),chaptersUl.appendChild(e)}function getRandomTitleWithoutRepetition(){var e=modelsDivTitleList.slice().sort(()=>Math.random()-.5),t=e.pop();return 0===e.length&&modelsDivTitleList.sort(()=>Math.random()-.5),t}function scrollToHeader(e,t){document.querySelector(".chapters").querySelectorAll("li").forEach(e=>{e.classList.remove("text-accent-primary","relative"),e.querySelector("div")&&e.querySelector("div").remove()}),e.parentElement.classList.add("text-accent-primary","relative");var n=document.createElement("div");n.classList.add("absolute","bottom-0","left-0","translate-y-2","w-full","h-0.5","bg-accent-primary"),e.parentElement.appendChild(n),document.querySelectorAll("h4").forEach(e=>{e.textContent.trim()===t&&e.scrollIntoView({behavior:"smooth"})})}async function fetchSystemResources(){try{var e=await fetch("/system-resources");if(!e.ok)throw new Error("Failed to fetch system resources");var t,n,a,r,o,l,i,s,c,m,d,p,u,_,h,x=await e.json();200===x.status&&((t=document.querySelector("#system-resources")).innerHTML="",n=x.content_drive.toFixed(2),a=x.models_drive.toFixed(2),r=x.total_ram.toFixed(2),o=x.available_ram.toFixed(2),l=x.total_vram.toFixed(2),i=x.available_vram.toFixed(2),(s=document.createElement("div")).classList.add("notion-text"),s.textContent="Your system resources:",(c=document.createElement("ul")).classList.add("notion-list","notion-list-disc","text-dim-gray"),(m=document.createElement("li")).innerHTML=`Total size of content ${n} Gb in folder <a class="underline">.wunjo/content</a>`,(d=document.createElement("li")).innerHTML=`Total size of models ${a} Gb in folder <a class="underline">.wunjo/all_models</a>`,(p=document.createElement("li")).innerHTML=`Total RAM ${r} Gb`,(u=document.createElement("li")).innerHTML=`Available RAM ${o} Gb`,(_=document.createElement("li")).innerHTML=`Total VRAM ${l} Gb`,(h=document.createElement("li")).innerHTML=`Available VRAM ${i} Gb`,c.appendChild(m),c.appendChild(d),c.appendChild(p),c.appendChild(u),c.appendChild(_),c.appendChild(h),t.appendChild(s),t.appendChild(c))}catch(e){console.error("Error fetching system resources:",e.message)}}async function setProcessor(){try{var e=await fetch("/set-processor",{method:"POST",headers:{"Content-Type":"application/json"}});if(!e.ok)throw new Error("Failed to set processor");await e.json();window.location.reload()}catch(e){console.error("Error setting processor:",e.message)}}async function fetchProcessor(){try{var e=await fetch("/get-processor");if(!e.ok)throw new Error("Failed to fetch processor");var t=await e.json(),n=t.upgrade_gpu,a=t.current_processor,r=document.querySelector("#system-processor");!0===n?(console.log(a),r.innerHTML="cuda"===a?'In GPU mode, <text class="text-accent-primary">models are executed using the GPU</text> for enhanced performance. If you wish to give the machine a break, you can transfer the models back to the CPU by clicking <button onclick="setProcessor();" class="underline text-danger-primary">here</button>. Remember, you can only switch processors when there is no active processing.':'Currently, models from various <text class="text-danger-primary">modules are running on the CPU</text>. To switch to GPU processing, simply click <button onclick="setProcessor();" class="underline text-accent-primary">here</button>. Please note that you can only transfer processing to the GPU if there is no ongoing computation.'):r.innerHTML="On this machine, models are limited to CPU processing only. To utilize the GPU, please refer to the FAQ section or check the log for more information."}catch(e){console.error("Error fetching processor:",e.message)}}function validatePort(e){var t=parseInt(e.min),n=parseInt(e.max);let a=parseInt(e.value);a<t?a=t:a>n&&(a=n),e.value=a}async function setPort(){try{var e=document.querySelector("#system-port");if(e){var t=e.querySelector("input");if(t&&""!==t.value.trim()){var n={port:parseInt(t.value)},a=await fetch("/set-port",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!a.ok)throw new Error("Failed to set port");var r,o=await a.json();200===o.status&&(r=o.port,e.innerHTML=`<p>A new port has been installed. For the changes to take effect, <text class="text-danger-primary">restart the application.</text></p><p>Your new port: <input onchange="validatePort(this)" min="1024" max="65535" name="port" value="${r}" type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none">.</p><p>But, if you need to switch port again. Just let click <button onclick="setPort()" type="button"class="text-accent-primary">here</button></p>`)}else console.error("System input is empty or not found")}else console.error("System port element not found")}catch(e){console.error("Error setting port:",e.message)}}async function fetchPort(){try{var e=await fetch("/get-port");if(!e.ok)throw new Error("Failed to fetch port");var t,n,a,r=await e.json();200===r.status?(t=document.querySelector("#system-port"),n=r.port,a=r.run_port,t.innerHTML=n!==a?`<text>Application run on port ${a}. </text>`:'<text>You can get access to application by <text class="text-accent-primary">static port in local network. </text></text>',t.innerHTML+=`<text>Your static port: <input min="1024" max="65535" onchange="validatePort(this)" name="port" value="${n}" type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"> which you can change.</p><p>If you need to apply switch port, I'll handle it smoothly. Just let click <button onclick="setPort()" type="button" class="text-danger-primary underline">here</button>.</text>`):console.log(r.message)}catch(e){console.error("Error fetching port:",e.message)}}async function fetchPublicShare(){document.querySelector("#system-public-share").innerHTML='<p>Not available without a professional subscription. You can renew or subscribe <a target="_blank" rel="noopener noreferrer"  href="https://wunjo.online/pricing" class="underline text-danger-primary">here</a>.</p>'}async function fetchInitParameters(){try{var e=await fetch("/get-init-config");if(!e.ok)throw new Error("Failed to fetch init config");var t=await e.json(),n=(t.all_parameters,document.querySelector("#system-init-parameters")),a=(n.innerHTML="",document.createElement("div")),r=(a.classList.add("notion-text"),a.innerHTML='After updating the settings, <text class="text-danger-primary">you need to restart</text> the application for the <text class="text-danger-primary">changes to take effect.</text>',document.createElement("div")),o=(r.classList.add("notion-text"),r.textContent="You can configure the number of tasks processed to increase or decrease the load and the time to clear old tasks.",document.createElement("ul")),l=(o.classList.add("notion-list","notion-list-disc","text-dim-gray"),document.createElement("li")),i=(l.innerHTML=`<p>Current <text class="text-accent-primary">max queue</text> can be run at the same time for <text class="text-accent-primary">all users in CPU tasks</text>: ${t.all_parameters.CPU_MAX_QUEUE_ALL_USER}.</p><p>New value: <input name=CPU_MAX_QUEUE_ALL_USER value=${t.all_parameters.CPU_MAX_QUEUE_ALL_USER} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,o.appendChild(l),o.appendChild(document.createElement("br")),document.createElement("li")),s=(i.innerHTML=`<p>Current <text class="text-accent-primary">max queue</text> can be run at the same time for <text class="text-accent-primary">one user in CPU tasks</text>: ${t.all_parameters.CPU_MAX_QUEUE_ONE_USER}.</p><p>New value: <input name=CPU_MAX_QUEUE_ONE_USER value=${t.all_parameters.CPU_MAX_QUEUE_ONE_USER} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,o.appendChild(i),o.appendChild(document.createElement("br")),document.createElement("li")),c=(s.innerHTML=`<p>Current <text class="text-accent-primary">max time</text> after which need to <text class="text-accent-primary">remove old CPU tasks</text> in minutes: ${t.all_parameters.CPU_QUEUE_CANCEL_TIME_MIN} min.</p><p>New value: <input name=CPU_QUEUE_CANCEL_TIME_MIN value=${t.all_parameters.CPU_QUEUE_CANCEL_TIME_MIN} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,o.appendChild(s),o.appendChild(document.createElement("br")),document.createElement("div")),m=(c.classList.add("notion-text"),c.textContent="Between launching successive tasks, it is necessary to set a delay time so that the program can get the correct values of memory used for each task and not overload the device.",document.createElement("ul")),d=(m.classList.add("notion-list","notion-list-disc","text-dim-gray"),document.createElement("li")),p=(d.innerHTML=`<p>Current <text class="text-accent-primary">CPU delay time</text> between run tasks to clear calculate using memory: ${t.all_parameters.CPU_DELAY_TIME_SEC} sec.</p><p>New value: <input name=CPU_DELAY_TIME_SEC value=${t.all_parameters.CPU_DELAY_TIME_SEC} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,m.appendChild(d),m.appendChild(document.createElement("br")),document.createElement("div")),u=(p.classList.add("notion-text"),p.textContent="Processing tasks requires power. If the launch occurs only on the CPU, then it is RAM.",document.createElement("ul")),_=(u.classList.add("notion-list","notion-list-disc","text-dim-gray"),document.createElement("li")),h=(_.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">CPU task</text>: ${t.all_parameters.MIN_RAM_CPU_TASK_GB} GB.</p><p>New value: <input name=MIN_RAM_CPU_TASK_GB value=${t.all_parameters.MIN_RAM_CPU_TASK_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(_),u.appendChild(document.createElement("br")),document.createElement("li")),x=(h.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">remove background task</text>: ${t.all_parameters.MIN_RAM_REMOVE_BACKGROUND_GB} GB.</p><p>New value: <input name=MIN_RAM_REMOVE_BACKGROUND_GB value=${t.all_parameters.MIN_RAM_REMOVE_BACKGROUND_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(h),u.appendChild(document.createElement("br")),document.createElement("li")),E=(x.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">remove object task</text>: ${t.all_parameters.MIN_RAM_REMOVE_OBJECT_GB} GB.</p><p>New value: <input name=MIN_RAM_REMOVE_OBJECT_GB value=${t.all_parameters.MIN_RAM_REMOVE_OBJECT_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(x),u.appendChild(document.createElement("br")),document.createElement("li")),C=(E.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">face swap task</text>: ${t.all_parameters.MIN_RAM_FACE_SWAP_GB} GB.</p><p>New value: <input name=MIN_RAM_FACE_SWAP_GB value=${t.all_parameters.MIN_RAM_FACE_SWAP_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(E),u.appendChild(document.createElement("br")),document.createElement("li")),y=(C.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">enhancement task</text>: ${t.all_parameters.MIN_RAM_ENHANCEMENT_GB} GB.</p><p>New value: <input name=MIN_RAM_ENHANCEMENT_GB value=${t.all_parameters.MIN_RAM_ENHANCEMENT_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(C),u.appendChild(document.createElement("br")),document.createElement("li")),M=(y.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">lip sync task</text>: ${t.all_parameters.MIN_RAM_LIP_SYNC_GB} GB.</p><p>New value: <input name=MIN_RAM_LIP_SYNC_GB value=${t.all_parameters.MIN_RAM_LIP_SYNC_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(y),u.appendChild(document.createElement("br")),document.createElement("li")),b=(M.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">separator task on CPU</text>: ${t.all_parameters.MIN_RAM_SEPARATOR_GB} GB.</p><p>New value: <input name=MIN_RAM_SEPARATOR_GB value=${t.all_parameters.MIN_RAM_SEPARATOR_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(M),u.appendChild(document.createElement("br")),document.createElement("li")),g=(b.innerHTML=`<p>Current <text class="text-accent-primary">min RAM</text> to run processing <text class="text-accent-primary">clone voice task on CPU</text>: ${t.all_parameters.MIN_RAM_CLONE_VOICE_GB} GB.</p><p>New value: <input name=MIN_RAM_CLONE_VOICE_GB value=${t.all_parameters.MIN_RAM_CLONE_VOICE_GB} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,u.appendChild(b),u.appendChild(document.createElement("br")),document.createElement("div")),A=(g.classList.add("notion-text"),g.textContent="You can set a limit on downloaded content in the application so as not to overload it. If the content size is larger than the limit, the content will be automatically cut off. It is set in bits, with 1 GB ~ 1*1024 MB ~ 1*1024*1024 Bytes.",document.createElement("ul")),f=(A.classList.add("notion-list","notion-list-disc","text-dim-gray"),document.createElement("li")),v=(f.innerHTML=`<p>Current <text class="text-accent-primary">max file size</text> which can be load in application: ${t.all_parameters.MAX_FILE_SIZE} bytes.</p><p>New value: <input name=MAX_FILE_SIZE value=${t.all_parameters.MAX_FILE_SIZE} type="number" class="w-24 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,A.appendChild(f),A.appendChild(document.createElement("br")),document.createElement("div")),N=(v.classList.add("notion-text"),v.textContent="You can set the maximum resolution for each module; if the content resolution is higher, it will automatically change its size. Remember, the lower the resolution, the less resources your device requires.",document.createElement("ul")),T=(N.classList.add("notion-list","notion-list-disc","text-dim-gray"),document.createElement("li")),L=(T.innerHTML=`<p>Current <text class="text-accent-primary">max resolution for remove background</text> to set limit for resize content: ${t.all_parameters.MAX_RESOLUTION_REMOVE_BACKGROUND}.</p><p>New value: <input name=MAX_RESOLUTION_REMOVE_BACKGROUND value=${t.all_parameters.MAX_RESOLUTION_REMOVE_BACKGROUND} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),R=(L.innerHTML=`<p>Current <text class="text-accent-primary">max resolution for remove object</text> to set limit for resize content: ${t.all_parameters.MAX_RESOLUTION_REMOVE_OBJECT}.</p><p>New value: <input name=MAX_RESOLUTION_REMOVE_OBJECT value=${t.all_parameters.MAX_RESOLUTION_REMOVE_OBJECT} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),O=(R.innerHTML=`<p>Current <text class="text-accent-primary">max resolution for face swap</text> to set limit for resize content: ${t.all_parameters.MAX_RESOLUTION_FACE_SWAP}.</p><p>New value: <input name=MAX_RESOLUTION_FACE_SWAP value=${t.all_parameters.MAX_RESOLUTION_FACE_SWAP} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),I=(O.innerHTML=`<p>Current <text class="text-accent-primary">max resolution for enhancement</text> to set limit for resize content: ${t.all_parameters.MAX_RESOLUTION_ENHANCEMENT}.</p><p>New value: <input name=MAX_RESOLUTION_ENHANCEMENT value=${t.all_parameters.MAX_RESOLUTION_ENHANCEMENT} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),w=(I.innerHTML=`<p>Current <text class="text-accent-primary">max resolution for lip sync</text> to set limit for resize content: ${t.all_parameters.MAX_RESOLUTION_LIP_SYNC}.</p><p>New value: <input name=MAX_RESOLUTION_LIP_SYNC value=${t.all_parameters.MAX_RESOLUTION_LIP_SYNC} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),S=(w.innerHTML=`<p>Current <text class="text-accent-primary">max resolution for restyling</text> to set limit for resize content: ${t.all_parameters.MAX_RESOLUTION_DIFFUSER}.</p><p>New value: <input name=MAX_RESOLUTION_DIFFUSER value=${t.all_parameters.MAX_RESOLUTION_DIFFUSER} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,N.appendChild(T),N.appendChild(L),N.appendChild(R),N.appendChild(O),N.appendChild(I),N.appendChild(w),N.appendChild(document.createElement("br")),document.createElement("div")),U=(S.classList.add("notion-text"),S.textContent="You can set the duration for processing your content. Remember, the shorter the duration, the faster you will get the result.",document.createElement("ul")),k=(U.classList.add("notion-list","notion-list-disc","text-dim-gray"),document.createElement("li")),P=(k.innerHTML=`<p>Current <text class="text-accent-primary">max duration for remove background in video content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_REMOVE_BACKGROUND} sec.</p><p>New value: <input name=MAX_DURATION_SEC_REMOVE_BACKGROUND value=${t.all_parameters.MAX_DURATION_SEC_REMOVE_BACKGROUND} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),$=(P.innerHTML=`<p>Current <text class="text-accent-primary">max duration for remove object in video content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_REMOVE_OBJECT} sec.</p><p>New value: <input name=MAX_DURATION_SEC_REMOVE_OBJECT value=${t.all_parameters.MAX_DURATION_SEC_REMOVE_OBJECT} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),B=($.innerHTML=`<p>Current <text class="text-accent-primary">max duration for face swap in video content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_FACE_SWAP} sec.</p><p>New value: <input name=MAX_DURATION_SEC_FACE_SWAP value=${t.all_parameters.MAX_DURATION_SEC_FACE_SWAP} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),H=(B.innerHTML=`<p>Current <text class="text-accent-primary">max duration for enhancement in video content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_ENHANCEMENT} sec.</p><p>New value: <input name=MAX_DURATION_SEC_ENHANCEMENT value=${t.all_parameters.MAX_DURATION_SEC_ENHANCEMENT} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),D=(H.innerHTML=`<p>Current <text class="text-accent-primary">max duration for lip sync in video content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_LIP_SYNC} sec.</p><p>New value: <input name=MAX_DURATION_SEC_LIP_SYNC value=${t.all_parameters.MAX_DURATION_SEC_LIP_SYNC} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),X=(D.innerHTML=`<p>Current <text class="text-accent-primary">max duration for restyling in video content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_DIFFUSER} sec.</p><p>New value: <input name=MAX_DURATION_SEC_DIFFUSER value=${t.all_parameters.MAX_DURATION_SEC_DIFFUSER} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),G=(X.innerHTML=`<p>Current <text class="text-accent-primary">max duration for separator in audio content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_SEPARATOR} sec.</p><p>New value: <input name=MAX_DURATION_SEC_SEPARATOR value=${t.all_parameters.MAX_DURATION_SEC_SEPARATOR} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),F=(G.innerHTML=`<p>Current <text class="text-accent-primary">max duration for clone voice in audio content</text> to set limit on duration: ${t.all_parameters.MAX_DURATION_SEC_CLONE_VOICE} sec.</p><p>New value: <input name=MAX_DURATION_SEC_CLONE_VOICE value=${t.all_parameters.MAX_DURATION_SEC_CLONE_VOICE} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,document.createElement("li")),V=(F.innerHTML=`<p>Current <text class="text-accent-primary">max number symbols for text of speech to do clone voice</text> to set limit on symbols: ${t.all_parameters.MAX_NUMBER_SYNBOLS_CLONE_VOICE} sec.</p><p>New value: <input name=MAX_NUMBER_SYNBOLS_CLONE_VOICE value=${t.all_parameters.MAX_NUMBER_SYNBOLS_CLONE_VOICE} type="number" class="w-14 text-m-mobile lg:text-m rounded-md bg-dark-elements box-content text-center outline-none"></p>`,U.appendChild(k),U.appendChild(P),U.appendChild($),U.appendChild(B),U.appendChild(H),U.appendChild(D),U.appendChild(X),U.appendChild(G),U.appendChild(F),n.appendChild(a),n.appendChild(r),n.appendChild(o),n.appendChild(c),n.appendChild(m),n.appendChild(p),n.appendChild(u),n.appendChild(g),n.appendChild(A),n.appendChild(v),n.appendChild(N),n.appendChild(S),n.appendChild(U),document.createElement("div"));V.innerHTML='To apply the changes, click <button onclick="setInitParameters()" class="text-danger-primary underline" type="button">here</button>. Remember that the changes will take effect after manually restarting the program.',n.appendChild(V)}catch(e){console.error("Error fetching processor:",e.message)}}async function setInitParameters(){var e=document.querySelector("#system-init-parameters").querySelectorAll("input");let n={};e.forEach(e=>{var t=e.name;n[t]=parseInt(e.value)});try{var t=await fetch("/set-init-config",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!t.ok)throw new Error("Failed to set new init parameters");200===(await t.json()).status&&await fetchInitParameters()}catch(e){console.error("Error setting new init parameters:",e.message)}}fetchSystemResources().then(()=>{console.log("System resources fetched successfully.")}).catch(e=>{console.error("Error fetching system resources:",e.message)}),fetchProcessor().then(()=>{console.log("System internet mode fetched successfully.")}).catch(e=>{console.error("Error fetching system resources:",e.message)}),fetchPort().then(()=>{console.log("System port fetched successfully.")}).catch(e=>{console.error("Error fetching system port:",e.message)}),fetchPublicShare().then(()=>{console.log("System port fetched successfully.")}).catch(e=>{console.error("Error fetching system public share:",e.message)}),fetchInitParameters().then(()=>{console.log("Init parameters fetched successfully.")}).catch(e=>{console.error("Error fetching init parameters:",e.message)});